var search_data = {"index":{"searchIndex":["harp","harpinterpreter","lifecycle","logger","runtime","harpapiapp","object","rootapp","sandboxmodule","<<()","close()","consume()","create()","createparallel()","destroy()","destroyparallel()","die()","engine()","flush()","method_added()","new()","new()","onfail()","play()","push()","respond()","set_engine()","set_log()","update()","updateparallel()","updateto()","gemfile","license","rakefile"],"longSearchIndex":["harp","harp::harpinterpreter","harp::lifecycle","harp::logger","harp::runtime","harpapiapp","object","rootapp","sandboxmodule","harp::logger#<<()","harp::logger#close()","harp::harpinterpreter#consume()","harp::harpinterpreter#create()","harp::harpinterpreter#createparallel()","harp::harpinterpreter#destroy()","harp::harpinterpreter#destroyparallel()","sandboxmodule#die()","sandboxmodule#engine()","harp::logger#flush()","sandboxmodule::method_added()","harp::harpinterpreter::new()","harp::logger::new()","harp::harpinterpreter#onfail()","harp::harpinterpreter#play()","harp::logger#push()","harp::harpinterpreter#respond()","sandboxmodule#set_engine()","harp::logger#set_log()","harp::harpinterpreter#update()","harp::harpinterpreter#updateparallel()","harp::harpinterpreter#updateto()","","",""],"info":[["Harp","","Harp.html","","<p>Public Harp Logger API\n<p>To replace an existing logger with a new one:\n\n<pre>Harp::Logger.set_log(log{String, IO},level{Symbol, ...</pre>\n"],["Harp::HarpInterpreter","","Harp/HarpInterpreter.html","","<p>The interpreter reads in the template, and makes itself available as\nengine() with the scope of the template. ...\n"],["Harp::Lifecycle","","Harp/Lifecycle.html","",""],["Harp::Logger","","Harp/Logger.html","",""],["Harp::Runtime","","Harp/Runtime.html","",""],["HarpApiApp","","HarpApiApp.html","",""],["Object","","Object.html","",""],["RootApp","","RootApp.html","",""],["SandboxModule","","SandboxModule.html","",""],["<<","Harp::Logger","Harp/Logger.html#method-i-3C-3C","(string = nil)","<p>Appends a message to the log. The methods yield to an optional block and\nthe output of this block will ...\n"],["close","Harp::Logger","Harp/Logger.html#method-i-close","()","<p>Close and remove the current log object.\n"],["consume","Harp::HarpInterpreter","Harp/HarpInterpreter.html#method-i-consume","(template)","<p>Accept the resources from a template and add to the dictionary of resources\navailable to the template. ...\n"],["create","Harp::HarpInterpreter","Harp/HarpInterpreter.html#method-i-create","(resource)","<p>Create a resource and wait for the resource to become available.\n"],["createParallel","Harp::HarpInterpreter","Harp/HarpInterpreter.html#method-i-createParallel","(*resources)","<p>Create a set of resources; all resources must will be complete before\nprocessing continues.\n"],["destroy","Harp::HarpInterpreter","Harp/HarpInterpreter.html#method-i-destroy","(resource)","<p>Destroy a named resource.\n"],["destroyParallel","Harp::HarpInterpreter","Harp/HarpInterpreter.html#method-i-destroyParallel","(*resources)","<p>Destroy a named resource.\n"],["die","SandboxModule","SandboxModule.html#method-i-die","()",""],["engine","SandboxModule","SandboxModule.html#method-i-engine","()",""],["flush","Harp::Logger","Harp/Logger.html#method-i-flush","()","<p>Flush the entire buffer to the log object.\n"],["method_added","SandboxModule","SandboxModule.html#method-c-method_added","(method_name)",""],["new","Harp::HarpInterpreter","Harp/HarpInterpreter.html#method-c-new","()",""],["new","Harp::Logger","Harp/Logger.html#method-c-new","(*args)","<p>To initialize the logger you create a new object, proxies to set_log.\n<p>Parameters\n<p>*args &mdash; Arguments to create ...\n"],["onFail","Harp::HarpInterpreter","Harp/HarpInterpreter.html#method-i-onFail","(*fails)",""],["play","Harp::HarpInterpreter","Harp/HarpInterpreter.html#method-i-play","(harp_file, lifecycle)",""],["push","Harp::Logger","Harp/Logger.html#method-i-push","(string = nil)",""],["respond","Harp::HarpInterpreter","Harp/HarpInterpreter.html#method-i-respond","()",""],["set_engine","SandboxModule","SandboxModule.html#method-i-set_engine","(engine)",""],["set_log","Harp::Logger","Harp/Logger.html#method-i-set_log","(log, log_level = nil, delimiter = \" ~ \", auto_flush = false)","<p>Replaces an existing logger with a new one.\n<p>Parameters\n<p>log&lt;IO, String&gt; &mdash; Either an IO object or a name ...\n"],["update","Harp::HarpInterpreter","Harp/HarpInterpreter.html#method-i-update","(resource)","<p>Update a resource to a new resource definition.\n"],["updateParallel","Harp::HarpInterpreter","Harp/HarpInterpreter.html#method-i-updateParallel","(*resources)","<p>Update a set of resources in parallel to new resource definitions.\n"],["updateTo","Harp::HarpInterpreter","Harp/HarpInterpreter.html#method-i-updateTo","(resource_start, resource_finish)","<p>Update a resource to an alternate definition.\n"],["Gemfile","","Gemfile.html","","<p>source 'rubygems.org'\n<p># Specify your gem's dependencies in harp-runtime.gemspec gemspec\n"],["LICENSE","","LICENSE.html","","\n<pre>         Apache License\n   Version 2.0, January 2004\nhttp://www.apache.org/licenses/</pre>\n<p>TERMS AND CONDITIONS ...\n"],["Rakefile","","Rakefile.html","","<p>#!/usr/bin/env rake require \"bundler/gem_tasks\"\n"]]}}